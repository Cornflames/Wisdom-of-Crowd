setwd("~/Studium Psychologie/Hausarbeit Theorienformalisierung")
rlnorm(1)
realize_IFE <- function(pk) {
rlnorm(1)
}
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
T
R_version()
version()
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages("rstan")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
plnorm(20, meanlog = 4, sdlog = 0.05)
weight_on_advice <- function (CONF, FE, SI) {
distance_factor <- 1 - (abs(SI - IFE) / SI)
WOA <- (1 - CONF) * ifelse(distance_factor > 1, 1, distance_factor)
WOA
}
weight_on_advice(0.5, 50, 100)
weight_on_advice <- function (CONF, IFE, SI) {
distance_factor <- 1 - (abs(SI - IFE) / SI)
WOA <- (1 - CONF) * ifelse(distance_factor > 1, 1, distance_factor)
WOA
}
weight_on_advice(0.5, 50, 100)
weight_on_advice(0.1, 50, 100)
distance_factor <- function (IFE, SI) {
1 - (abs(SI - IFE) / SI)
}
distance_factor(50, 100)
WOA <- (1 - CONF) * ifelse(df > 1, 1, df)
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- (1 - CONF) * ifelse(df > 1, 1, df)
WOA
}
weight_on_advice(0.5, 50, 100)
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- CONF * ifelse(df > 1, 1, df)
WOA
}
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- 1 - (CONF * ifelse(df > 1, 1, df))
WOA
}
weight_on_advice(0.5, 50, 100)
weight_on_advice(1, 50, 100)
weight_on_advice(0.75, 50, 100)
weight_on_advice(1, 75, 100)
weight_on_advice(0.5, 75, 100)
weight_on_advice(0.5, 900, 1000)
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- 1 - (CONF * ifelse(df > 1, 1, df))
WOA
}
indiv_second_estimate <- function (ife, SI, WOA) {
my <- WOA * SI + (1 - WOA)*ife
rnorm(1, mean = my, sd = 1)
}
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- 1 - (CONF * ifelse(df > 1, 1, df))
WOA
}
indiv_second_estimate <- function (ife, SI) {
WOA <- weight_on_advice(ife, SI)
my <- WOA * SI + (1 - WOA)*ife
rnorm(1, mean = my, sd = 1)
}
indiv_second_estimate(50, 100)
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- 1 - (CONF * ifelse(df > 1, 1, df))
WOA
}
indiv_second_estimate <- function (CONF, ife, SI) {
WOA <- weight_on_advice(CONF, ife, SI)
my <- WOA * SI + (1 - WOA)*ife
rnorm(1, mean = my, sd = 1)
}
indiv_second_estimate(50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 75, 100)
indiv_second_estimate(1, 75, 100)
indiv_second_estimate(1, 75, 100)
indiv_second_estimate(1, 75, 100)
indiv_second_estimate(1, 75, 100)
library(truncnorm)
