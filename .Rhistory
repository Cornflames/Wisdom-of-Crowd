setwd("~/Studium Psychologie/Hausarbeit Theorienformalisierung")
rlnorm(1)
realize_IFE <- function(pk) {
rlnorm(1)
}
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
realize_IFE(0.5)
T
R_version()
version()
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages("rstan")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
plnorm(20, meanlog = 4, sdlog = 0.05)
weight_on_advice <- function (CONF, FE, SI) {
distance_factor <- 1 - (abs(SI - IFE) / SI)
WOA <- (1 - CONF) * ifelse(distance_factor > 1, 1, distance_factor)
WOA
}
weight_on_advice(0.5, 50, 100)
weight_on_advice <- function (CONF, IFE, SI) {
distance_factor <- 1 - (abs(SI - IFE) / SI)
WOA <- (1 - CONF) * ifelse(distance_factor > 1, 1, distance_factor)
WOA
}
weight_on_advice(0.5, 50, 100)
weight_on_advice(0.1, 50, 100)
distance_factor <- function (IFE, SI) {
1 - (abs(SI - IFE) / SI)
}
distance_factor(50, 100)
WOA <- (1 - CONF) * ifelse(df > 1, 1, df)
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- (1 - CONF) * ifelse(df > 1, 1, df)
WOA
}
weight_on_advice(0.5, 50, 100)
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- CONF * ifelse(df > 1, 1, df)
WOA
}
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- 1 - (CONF * ifelse(df > 1, 1, df))
WOA
}
weight_on_advice(0.5, 50, 100)
weight_on_advice(1, 50, 100)
weight_on_advice(0.75, 50, 100)
weight_on_advice(1, 75, 100)
weight_on_advice(0.5, 75, 100)
weight_on_advice(0.5, 900, 1000)
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- 1 - (CONF * ifelse(df > 1, 1, df))
WOA
}
indiv_second_estimate <- function (ife, SI, WOA) {
my <- WOA * SI + (1 - WOA)*ife
rnorm(1, mean = my, sd = 1)
}
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- 1 - (CONF * ifelse(df > 1, 1, df))
WOA
}
indiv_second_estimate <- function (ife, SI) {
WOA <- weight_on_advice(ife, SI)
my <- WOA * SI + (1 - WOA)*ife
rnorm(1, mean = my, sd = 1)
}
indiv_second_estimate(50, 100)
distance_factor <- function (IFE, SI) {
# Deviation of the social Information from the first estimate
1 - (abs(SI - IFE) / IFE)
}
weight_on_advice <- function (CONF, IFE, SI) {
df <- distance_factor(IFE, SI)
WOA <- 1 - (CONF * ifelse(df > 1, 1, df))
WOA
}
indiv_second_estimate <- function (CONF, ife, SI) {
WOA <- weight_on_advice(CONF, ife, SI)
my <- WOA * SI + (1 - WOA)*ife
rnorm(1, mean = my, sd = 1)
}
indiv_second_estimate(50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 50, 100)
indiv_second_estimate(1, 75, 100)
indiv_second_estimate(1, 75, 100)
indiv_second_estimate(1, 75, 100)
indiv_second_estimate(1, 75, 100)
indiv_second_estimate(1, 75, 100)
library(truncnorm)
source(".functions.R")
source("code/functions.R")
source("code/functions.R")
source("code/functions.R")
+ geom_point()
source("code/functions.R")
library(ggplot2)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data$woa <- getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa))
+ geom_point()
source("code/functions.R")
library(ggplot2)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data$woa <- getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa)) +
geom_point()
View(woa_conf_si_data)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa)) +
geom_point(aes(colour = distance))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa)) +
geom_point(aes(colour = factor(distance)))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
geom_point()
View(woa_conf_si_data)
getWeightOnAdvice(0.2, 1.2, 1)
abs((1.2 / 1) - 1)
min(0.2, 1)
min(1.2, 1)
0.8 * 0.2
1 - (0.2 * 0.8)
getWeightOnAdvice(0.2, 1.2, 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = distance, y = woa, colour = factor(conf))) +
geom_point()
ggplot(data = woa_conf_si_data, mapping = aes(x = distance, y = woa, colour = factor(conf))) +
geom_point() +
geom_line()
woa_conf_si_data$woa <- getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
geom_point() +
geom_line()
getWeightOnAdvice(0.2, 1.2, 1)
getWeightOnAdvice(0.2, 1.4, 1)
woa_conf_si_data[, woa_conf_si_data$conf == 0.2]
woa_conf_si_data[woa_conf_si_data$conf == 0.2,]
woa_conf_si_data[woa_conf_si_data$conf == 0.2,]$distance == 0.4
woa_conf_si_data[woa_conf_si_data$conf == 0.2,][3]
woa_conf_si_data[woa_conf_si_data$conf == 0.2,][3, 3]
woa_conf_si_data[woa_conf_si_data$conf == 0.2,][3, 2]
woa_conf_si_data[woa_conf_si_data$conf == 0.2,][3, 1]
woa_conf_si_data[woa_conf_si_data$conf == 0.2,][3, 4]
getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
getWeightOnAdvice(0.2, c(0, 0.2, 0.4, 0.6, 0.8, 1), 1)
getWeightOnAdvice(c(0.2, 0.2, 0.2, 0.2, 0.2, 0.2), c(0, 0.2, 0.4, 0.6, 0.8, 1), 1)
getWeightOnAdvice(c(0.2, 0.2, 0.2, 0.2, 0.2, 0.2), c(0, 0.2, 0.4, 0.6, 0.8, 1), c(1, 1, 1, 1, 1, 1))
getWeightOnAdvice(c(0.2, 0.2, 0.2, 0.2, 0.2, 0.2), c(1, 1.2, 1.4, 1.6, 1.8, 2), c(1, 1, 1, 1, 1, 1))
getWeightOnAdvice(0.2, 1.6, 1)
c(1, 2, 3) + 1
woa_conf_si_data$woa <- sapply(woa_conf_si_data$conf, getWeightOnAdvice, first_estimate = woa_conf_si_data$distance + 1, social_information = 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
geom_point() +
geom_line()
source("code/functions.R")
library(ggplot2)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
#woa_conf_si_data$woa <- getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
woa_conf_si_data$woa <- sapply(woa_conf_si_data$conf, getWeightOnAdvice, first_estimate = woa_conf_si_data$distance + 1, social_information = 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
geom_point() +
geom_line()
View(woa_conf_si_data)
sapply(0.2, getWeightOnAdvice, first_estimate = 1.2, social_information = 1)
sapply(0.2, getWeightOnAdvice, first_estimate = c(1.2, 1.4), social_information = 1)
sapply(0.2, getWeightOnAdvice, first_estimate = c(1.2, 1.4), social_information = c(1, 1))
sapply(c(0.2, 0.2), getWeightOnAdvice, first_estimate = c(1.2, 1.4), social_information = c(1, 1))
getWeightOnAdvice(c(1), c(1.2, 1.4), c(1))
getWeightOnAdvice(c(1, 1), c(1.2, 1.4), c(1))
getWeightOnAdvice(c(1, 1), c(1.2), c(1))
getWeightOnAdvice(c(1, 1), c(1.2), 1)
getWeightOnAdvice(c(1, 1), c(1.2, 1.4), 1)
getWeightOnAdvice(1, 1.2, 1)
getWeightOnAdvice(1, 1.4, 1)
getWeightOnAdvice(c(1, 1), c(1.2, 1.4), c(1, 1))
psi(1.4, 1, 0.5)
psi(1.4, 1, c(0.5, 0.8))
psi(1.4, 1, c(0.5, 0.8, 0.9))
psi(1.4, c(1.3, 1.5, 1.7), c(0.5, 0.8, 0.9))
psi(1.4, c(1.3, 1.5), c(0.5, 0.8, 0.9))
getWeightOnAdvice(0.2, c(1.2, 1.4), 1)
source("code/functions.R")
source("code/functions.R")
source("code/functions.R")
library(ggplot2)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
#woa_conf_si_data$woa <- getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
#woa_conf_si_data$woa <- sapply(woa_conf_si_data$conf, getWeightOnAdvice, first_estimate = woa_conf_si_data$distance + 1, social_information = 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
geom_point() +
geom_line()
getWeightOnAdvice(0.2, c(1.2, 1.4), 1)
getWeightOnAdvice(c(0.2, 0.4), c(1.2, 1.4), 1)
source("code/functions.R")
getWeightOnAdvice(c(0.2, 0.4), c(1.2, 1.4), 1)
getWeightOnAdvice(c(0.2, 0.2), c(1.2, 1.4), 1)
abs((c(1.2, 1.4) / 1) - 1)
1 - min(c(0.2, 0.4), 1)
1 - pmin(c(0.2, 0.4), 1)
source("code/functions.R")
getWeightOnAdvice(1, 1.4, 1)
getWeightOnAdvice(1, c(1.4, 1.6), 1)
source("code/functions.R")
library(ggplot2)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data$woa <- getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
geom_point() +
geom_line()
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
xlab("Confidence") + ylab("Weight on Advice (WOA)") +
geom_point() +
geom_line()
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
geom_point() +
geom_line()
source("code/functions.R")
library(ggplot2)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data$woa <- getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)")
geom_point() +
geom_line()
source("code/functions.R")
library(ggplot2)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data$woa <- getWeightOnAdvice(woa_conf_si_data$conf, woa_conf_si_data$distance + 1, 1)
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
geom_point() +
geom_line()
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance btw. FE and SI")
) +
geom_point() +
geom_line()
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
source("code/functions.R")
library(ggplot2)
library(dplyr)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
woa_conf_si_data %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
source("code/functions.R")
library(ggplot2)
library(dplyr)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% group_by(distance) %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
View(woa_conf_si_data)
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% group_by(conf) %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% group_by(distance) %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
tinytex::install_tinytex()
