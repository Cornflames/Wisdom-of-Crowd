))
}
}
#=================#
# SIMULATION RUNS #
#=================#
# number of trials for all simulations
n_trials <- 100
# true value for all simulations
# value is taken from intuition, not to low and not too high
# because we take the log of deviations, the order of magnitude
# of the true_value is respected, and different values for the truth
# should have no significant impact on the test results
true_value <- 1000
# value is taken from intuition, we dont expect an impact
# of other values for n on the results.
# As the IFE distributions are not identially distributed,
# we dont expect a convergence of the mean of the first estimates
# to the true value (central limit theorem).
n_group_members <- 100
#------------#
# BASE MODEL #
#------------#
# C1: low knowledge condition
c1_low_pk_results <- runSimulation(
n_individuals = n_group_members,
true_value = true_value,
social_info_type = "mean",
knowledge_distribution = "truncnorm",
knowledge_params = list(
mean = 0.2,
sd = 0.4
),
n_trials = n_trials
)
# C2: moderate knowledge condition
c2_moderate_pk_results <- runSimulation(
n_individuals = n_group_members,
true_value = true_value,
social_info_type = "mean",
knowledge_distribution = "truncnorm",
knowledge_params = list(
mean = 0.5,
sd = 0.4
),
n_trials = n_trials
)
# C3: high knowledge condition
c3_high_pk_results <- runSimulation(
n_individuals = n_group_members,
true_value = true_value,
social_info_type = "mean",
knowledge_distribution = "truncnorm",
knowledge_params = list(
mean = 0.8,
sd = 0.8
),
n_trials = n_trials
)
# Group results aggregated over trials
df_collective_accuracy_change <- data.frame(
acc_first = c(
c1_low_pk_results$aggregate_results$avg_collective_accuracy_first,
c2_moderate_pk_results$aggregate_results$avg_collective_accuracy_first,
c3_high_pk_results$aggregate_results$avg_collective_accuracy_first
),
acc_si = c(
c1_low_pk_results$aggregate_results$avg_social_info_accuracy,
c2_moderate_pk_results$aggregate_results$avg_social_info_accuracy,
c3_high_pk_results$aggregate_results$avg_social_info_accuracy
),
avg_dev = c(
c1_low_pk_results$aggregate_results$avg_deviations,
c2_moderate_pk_results$aggregate_results$avg_deviations,
c3_high_pk_results$aggregate_results$avg_deviations
),
acc_second = c(
c1_low_pk_results$aggregate_results$avg_collective_accuracy_second,
c2_moderate_pk_results$aggregate_results$avg_collective_accuracy_second,
c3_high_pk_results$aggregate_results$avg_collective_accuracy_second
),
acc_change = c(
c1_low_pk_results$aggregate_results$avg_collective_accuracy_change,
c2_moderate_pk_results$aggregate_results$avg_collective_accuracy_change,
c3_high_pk_results$aggregate_results$avg_collective_accuracy_change
),
acc_perc_change = c(
c1_low_pk_results$aggregate_results$avg_collective_accuracy_percent_change,
c2_moderate_pk_results$aggregate_results$avg_collective_accuracy_percent_change,
c3_high_pk_results$aggregate_results$avg_collective_accuracy_percent_change
),
revision_coefficients = c(
c1_low_pk_results$aggregate_results$avg_revision_coefficients,
c2_moderate_pk_results$aggregate_results$avg_revision_coefficients,
c3_high_pk_results$aggregate_results$avg_revision_coefficients
)
)
rownames(df_collective_accuracy_change) <- c("C1_LPK", "C2_MPK", "C3_HPK")
# Set seed for reproducibility
set.seed(40)
# Import necessarily libraries
source("code/functions.R")
library(ggplot2)
library(dplyr)
library(patchwork)
#---------------------------------------------#
# Plots for demonstrating model relationships #
#---------------------------------------------#
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
# Plot the distribution of individual estimates for
# different levels of prior knowledge
true_value = 20
pk_breaks <- seq(from = 0, to = 1, by = 0.2)
pk_fe_data <- data.frame(
pk = rep(pk_breaks, times = 100)
)
pk_fe_data <- pk_fe_data %>% rowwise() %>% mutate(sd_log = -0.95 * pk + 1, fe = dIndividualFirstEstimate(pk, true_value))
true_value_line <- data.frame(yintercept = true_value, Lines = "True Value")
violin <- ggplot(data = pk_fe_data, aes(x = pk, y = fe, fill = factor(sd_log))) +
scale_x_continuous(name = "Prior Knowledge", breaks = seq(0, 1, by = 0.2)) +
ylab("First Estimate") +
geom_violin() +
guides(
fill = guide_legend("SD of log")
) +
geom_hline(aes(yintercept = yintercept, linetype = Lines), true_value_line)
boxplot <- ggplot(data = pk_fe_data, aes(x = pk, y = fe, fill = factor(sd_log))) +
scale_x_continuous(name = "Prior Knowledge", breaks = seq(0, 1, by = 0.2)) +
ylab("First Estimate") +
geom_boxplot() +
guides(
fill = guide_legend("SD of log")
) +
geom_hline(aes(yintercept = yintercept, linetype = Lines), true_value_line)
violin + boxplot
#---------------------------------------------#
# Plots for results of the actual simulations #
#---------------------------------------------#
source("code/simulations.R")
# Plot the relationship between revision-coefficients and collective accuracy
# within the trials of the different simulation conditions
rev_acc_data <- data.frame(
condition = rep(c("C1", "C2", "C3"), each = n_trials),
rev_coef = c(
sapply(c1_low_pk_results$trial_results, function (x) x$revision_coefficient),
sapply(c2_moderate_pk_results$trial_results, function (x) x$revision_coefficient),
sapply(c3_high_pk_results$trial_results, function (x) x$revision_coefficient)
),
col_acc = c(
sapply(c1_low_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change),
sapply(c2_moderate_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change),
sapply(c3_high_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change)
)
)
ggplot(rev_acc_data, aes(x = rev_coef, y = col_acc, colour = factor(condition))) +
geom_point() +
geom_smooth()
# Set seed for reproducibility
set.seed(40)
# Import necessarily libraries
source("code/functions.R")
library(ggplot2)
library(dplyr)
library(patchwork)
#---------------------------------------------#
# Plots for demonstrating model relationships #
#---------------------------------------------#
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
# Plot the distribution of individual estimates for
# different levels of prior knowledge
true_value = 20
pk_breaks <- seq(from = 0, to = 1, by = 0.2)
pk_fe_data <- data.frame(
pk = rep(pk_breaks, times = 100)
)
pk_fe_data <- pk_fe_data %>% rowwise() %>% mutate(sd_log = -0.95 * pk + 1, fe = dIndividualFirstEstimate(pk, true_value))
true_value_line <- data.frame(yintercept = true_value, Lines = "True Value")
violin <- ggplot(data = pk_fe_data, aes(x = pk, y = fe, fill = factor(sd_log))) +
scale_x_continuous(name = "Prior Knowledge", breaks = seq(0, 1, by = 0.2)) +
ylab("First Estimate") +
geom_violin() +
guides(
fill = guide_legend("SD of log")
) +
geom_hline(aes(yintercept = yintercept, linetype = Lines), true_value_line)
boxplot <- ggplot(data = pk_fe_data, aes(x = pk, y = fe, fill = factor(sd_log))) +
scale_x_continuous(name = "Prior Knowledge", breaks = seq(0, 1, by = 0.2)) +
ylab("First Estimate") +
geom_boxplot() +
guides(
fill = guide_legend("SD of log")
) +
geom_hline(aes(yintercept = yintercept, linetype = Lines), true_value_line)
violin + boxplot
#---------------------------------------------#
# Plots for results of the actual simulations #
#---------------------------------------------#
source("code/simulations.R")
# Plot the relationship between revision-coefficients and collective accuracy
# within the trials of the different simulation conditions
rev_acc_data <- data.frame(
condition = rep(c("C1", "C2", "C3"), each = n_trials),
pk = rep(c("low", "moderate", "high"), each = n_trials),
rev_coef = c(
sapply(c1_low_pk_results$trial_results, function (x) x$revision_coefficient),
sapply(c2_moderate_pk_results$trial_results, function (x) x$revision_coefficient),
sapply(c3_high_pk_results$trial_results, function (x) x$revision_coefficient)
),
acc_change_perc = c(
sapply(c1_low_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change),
sapply(c2_moderate_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change),
sapply(c3_high_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change)
)
)
ggplot(rev_acc_data, aes(x = rev_coef, y = acc_change_perc, colour = factor(pk))) +
xlab("Revision-Coefficient") +
ylab("Change in Coll. Accuracy (%)") +
geom_point() +
geom_smooth() +
guides(
fill = guide_legend("Prior Knowledge")
)
# Set seed for reproducibility
set.seed(40)
# Import necessarily libraries
source("code/functions.R")
library(ggplot2)
library(dplyr)
library(patchwork)
#---------------------------------------------#
# Plots for demonstrating model relationships #
#---------------------------------------------#
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
# Plot the distribution of individual estimates for
# different levels of prior knowledge
true_value = 20
pk_breaks <- seq(from = 0, to = 1, by = 0.2)
pk_fe_data <- data.frame(
pk = rep(pk_breaks, times = 100)
)
pk_fe_data <- pk_fe_data %>% rowwise() %>% mutate(sd_log = -0.95 * pk + 1, fe = dIndividualFirstEstimate(pk, true_value))
true_value_line <- data.frame(yintercept = true_value, Lines = "True Value")
violin <- ggplot(data = pk_fe_data, aes(x = pk, y = fe, fill = factor(sd_log))) +
scale_x_continuous(name = "Prior Knowledge", breaks = seq(0, 1, by = 0.2)) +
ylab("First Estimate") +
geom_violin() +
guides(
fill = guide_legend("SD of log")
) +
geom_hline(aes(yintercept = yintercept, linetype = Lines), true_value_line)
boxplot <- ggplot(data = pk_fe_data, aes(x = pk, y = fe, fill = factor(sd_log))) +
scale_x_continuous(name = "Prior Knowledge", breaks = seq(0, 1, by = 0.2)) +
ylab("First Estimate") +
geom_boxplot() +
guides(
fill = guide_legend("SD of log")
) +
geom_hline(aes(yintercept = yintercept, linetype = Lines), true_value_line)
violin + boxplot
#---------------------------------------------#
# Plots for results of the actual simulations #
#---------------------------------------------#
source("code/simulations.R")
# Plot the relationship between revision-coefficients and collective accuracy
# within the trials of the different simulation conditions
rev_acc_data <- data.frame(
condition = rep(c("C1", "C2", "C3"), each = n_trials),
pk = rep(c("low", "moderate", "high"), each = n_trials),
rev_coef = c(
sapply(c1_low_pk_results$trial_results, function (x) x$revision_coefficient),
sapply(c2_moderate_pk_results$trial_results, function (x) x$revision_coefficient),
sapply(c3_high_pk_results$trial_results, function (x) x$revision_coefficient)
),
acc_change_perc = c(
sapply(c1_low_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change),
sapply(c2_moderate_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change),
sapply(c3_high_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change)
)
)
ggplot(rev_acc_data, aes(x = rev_coef, y = acc_change_perc, colour = factor(pk))) +
xlab("revision-coefficient") +
ylab("change in collective accuracy (%)") +
geom_point() +
geom_smooth() +
guides(
colours = guide_legend("Prior Knowledge")
)
# Set seed for reproducibility
set.seed(40)
# Import necessarily libraries
source("code/functions.R")
library(ggplot2)
library(dplyr)
library(patchwork)
#---------------------------------------------#
# Plots for demonstrating model relationships #
#---------------------------------------------#
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 1, by = 0.2)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = getWeightOnAdvice(conf, distance, 1))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 1, by = 0.2)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
# Plot the distribution of individual estimates for
# different levels of prior knowledge
true_value = 20
pk_breaks <- seq(from = 0, to = 1, by = 0.2)
pk_fe_data <- data.frame(
pk = rep(pk_breaks, times = 100)
)
pk_fe_data <- pk_fe_data %>% rowwise() %>% mutate(sd_log = -0.95 * pk + 1, fe = dIndividualFirstEstimate(pk, true_value))
true_value_line <- data.frame(yintercept = true_value, Lines = "True Value")
violin <- ggplot(data = pk_fe_data, aes(x = pk, y = fe, fill = factor(sd_log))) +
scale_x_continuous(name = "Prior Knowledge", breaks = seq(0, 1, by = 0.2)) +
ylab("First Estimate") +
geom_violin() +
guides(
fill = guide_legend("SD of log")
) +
geom_hline(aes(yintercept = yintercept, linetype = Lines), true_value_line)
boxplot <- ggplot(data = pk_fe_data, aes(x = pk, y = fe, fill = factor(sd_log))) +
scale_x_continuous(name = "Prior Knowledge", breaks = seq(0, 1, by = 0.2)) +
ylab("First Estimate") +
geom_boxplot() +
guides(
fill = guide_legend("SD of log")
) +
geom_hline(aes(yintercept = yintercept, linetype = Lines), true_value_line)
violin + boxplot
#---------------------------------------------#
# Plots for results of the actual simulations #
#---------------------------------------------#
source("code/simulations.R")
# Plot the relationship between revision-coefficients and collective accuracy
# within the trials of the different simulation conditions
rev_acc_data <- data.frame(
condition = rep(c("C1", "C2", "C3"), each = n_trials),
pk = rep(c("low", "moderate", "high"), each = n_trials),
rev_coef = c(
sapply(c1_low_pk_results$trial_results, function (x) x$revision_coefficient),
sapply(c2_moderate_pk_results$trial_results, function (x) x$revision_coefficient),
sapply(c3_high_pk_results$trial_results, function (x) x$revision_coefficient)
),
acc_change_perc = c(
sapply(c1_low_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change),
sapply(c2_moderate_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change),
sapply(c3_high_pk_results$trial_results, function (x) x$social_influence_effects$collective_accuracy_percent_change)
)
)
ggplot(rev_acc_data, aes(x = rev_coef, y = acc_change_perc, colour = factor(pk))) +
xlab("revision-coefficient") +
ylab("change in collective accuracy (%)") +
geom_point() +
geom_smooth() +
guides(
colour = guide_legend("Prior Knowledge")
)
getWeightOnAdvice(0.4, 1, 2)
getWeightOnAdvice(0.4, 1, 5)
getWeightOnAdvice(0.4, 1, 10)
getWeightOnAdvice(0.4, 1, 50)
getWeightOnAdvice(0.4, 1, 1)
getWeightOnAdvice(0.4, 1, 2)
getWeightOnAdvice(0.7, 1, 1)
getWeightOnAdvice(0.7, 1, 2)
getWeightOnAdvice(0.7, 1, 3)
getWeightOnAdvice(0.7, 1, 1)
getWeightOnAdvice(0.7, 1, 3)
getWeightOnAdvice(0.4, 1, 1)
getWeightOnAdvice(0.4, 1, 3)
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.1),
distance = seq(from = 0, to = 4, by = 0.1)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = (1 - conf) * (1 + conf * tanh(distance)))
ggplot(data = woa_conf_si_data, mapping = aes(x = conf, y = woa, colour = factor(distance))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 4, by = 0.5)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 4, by = 0.1)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = (1 - conf) * (1 + conf * tanh(distance)))
ggplot(data = woa_conf_si_data, mapping = aes(x = distance, y = woa, colour = factor(conf))) +
scale_x_continuous(name = "Confidence", breaks = seq(0, 4, by = 0.5)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Distance")
) +
geom_point() +
geom_line()
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.2),
distance = seq(from = 0, to = 4, by = 0.1)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = (1 - conf) * (1 + conf * tanh(distance)))
ggplot(data = woa_conf_si_data, mapping = aes(x = distance, y = woa, colour = factor(conf))) +
scale_x_continuous(name = "Distance", breaks = seq(0, 4, by = 0.5)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Confidence")
) +
geom_point() +
geom_line()
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.1),
distance = seq(from = 0, to = 4, by = 0.1)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = (1 - conf) * (1 + conf * tanh(distance)))
ggplot(data = woa_conf_si_data, mapping = aes(x = distance, y = woa, colour = factor(conf))) +
scale_x_continuous(name = "Distance", breaks = seq(0, 4, by = 0.5)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Confidence")
) +
geom_point() +
geom_line()
log(2)
log(3)
log(1)
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.1),
distance = seq(from = 0, to = 4, by = 0.1)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = (1 - conf*1.5) * (1 + conf * tanh(distance)))
ggplot(data = woa_conf_si_data, mapping = aes(x = distance, y = woa, colour = factor(conf))) +
scale_x_continuous(name = "Distance", breaks = seq(0, 4, by = 0.5)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Confidence")
) +
geom_point() +
geom_line()
# Plot of weight on advice against different confidence levels
# and distances between first estimate and social info
woa_conf_si_data <- expand.grid(
conf = seq(from = 0, to = 1, by = 0.1),
distance = seq(from = 0, to = 4, by = 0.1)
)
woa_conf_si_data <- woa_conf_si_data %>% rowwise() %>% mutate(woa = (1 - conf) * (1 + conf*1.5 * tanh(distance)))
ggplot(data = woa_conf_si_data, mapping = aes(x = distance, y = woa, colour = factor(conf))) +
scale_x_continuous(name = "Distance", breaks = seq(0, 4, by = 0.5)) +
ylab("Weight on Advice (WOA)") +
guides(
colour = guide_legend("Confidence")
) +
geom_point() +
geom_line()
